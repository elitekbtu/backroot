#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'components/ar/SimpleARScreen.tsx',
  'components/ar/ViroARScreen.tsx',
  'app/ar-test.tsx',
  'AR_README.md'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
let allFilesExist = true;

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    allFilesExist = false;
  }
});

console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
  
  const requiredDeps = [
    'expo-camera',
    'expo-location',
    '@reactvision/react-viro'
  ];
  
  requiredDeps.forEach(dep => {
    if (packageJson.dependencies[dep]) {
      console.log(`‚úÖ ${dep} - ${packageJson.dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
      allFilesExist = false;
    }
  });
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json');
  allFilesExist = false;
}

console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
try {
  const appJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'app.json'), 'utf8'));
  
  if (appJson.expo && appJson.expo.plugins) {
    const hasCameraPlugin = appJson.expo.plugins.some(plugin => 
      typeof plugin === 'string' ? plugin === 'expo-camera' : plugin[0] === 'expo-camera'
    );
    
    if (hasCameraPlugin) {
      console.log('‚úÖ expo-camera –ø–ª–∞–≥–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è  expo-camera –ø–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app.json');
    }
  } else {
    console.log('‚ö†Ô∏è  –ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ app.json');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app.json');
}

console.log('\nüì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start');
console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ —ç–º—É–ª—è—Ç–æ—Ä–µ');
console.log('3. –ù–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –Ω–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É "AR –û–ø—ã—Ç" –∏–ª–∏ "AR –¢–µ—Å—Ç"');
console.log('4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ AR —ç–∫—Ä–∞–Ω—É');
console.log('5. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
console.log('6. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ AR –æ–ø—ã—Ç–∞');
console.log('7. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ AR –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ –æ—á–∫–æ–≤');

console.log('\nüöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫:');
console.log('cd frontend && npm start');

if (allFilesExist) {
  console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! AR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
} else {
  console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.');
  process.exit(1);
}
